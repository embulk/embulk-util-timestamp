apply plugin: "java"
apply plugin: "maven"
apply plugin: "signing"

group = "org.embulk"
archivesBaseName = "${project.name}"
version = "0.1.0-SNAPSHOT"
description "Timestamp parser for Embulk and Embulk plugins"

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    javadocOnly { transitive false }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.embulk:embulk-util-rubytime:0.2.0"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.1"

    javadocOnly "joda-time:joda-time:2.10.2"
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    options.encoding = "UTF-8"
}

javadoc {
    title = "${project.name} v${project.version}"
    options {
        classpath += configurations.javadocOnly
        locale = "en_US"
        encoding = "UTF-8"
        overview = "src/main/html/overview.html"
        links "https://docs.oracle.com/javase/8/docs/api/"
        links "https://www.joda.org/joda-time/apidocs/"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

jar {
    from rootProject.file("LICENSE")
    from rootProject.file("NOTICE")
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
    from rootProject.file("LICENSE")
    from rootProject.file("NOTICE")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
    from rootProject.file("LICENSE")
    from rootProject.file("NOTICE")
}

artifacts {
    archives sourcesJar, javadocJar
}

tasks.withType(Sign) {
    onlyIf { project.hasProperty("signing.keyId") && project.hasProperty("signing.password") }
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("mavenCentral")) {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                if (!(project.hasProperty("sonatype.userName") && project.hasProperty("sonatype.password"))) {
                    throw new GradleException("Set sonatype.userName and sonatype.password to upload to Maven Central.")
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: project.getProperty("sonatype.userName"),
                                   password: project.getProperty("sonatype.password"))
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: project.getProperty("sonatype.userName"),
                                   password: project.getProperty("sonatype.password"))
                }
            } else {
                if (project.hasProperty("signing.keyId") && project.hasProperty("signing.password")) {
                    beforeDeployment {
                        MavenDeployment deployment -> signing.signPom(deployment)
                    }
                } else {
                    logger.warn('No OpenPGP key pair is configured.')
                }

                repository(url: "file:${project.buildDir}/mavenLocal")
                snapshotRepository(url: "file:${project.buildDir}/mavenLocalSnapshot")
            }

            pom.project {
                artifactId "${project.name}"
                groupId "${project.group}"

                packaging "jar"

                name "${project.name}"
                description "${project.description}"
                url "https://github.com/embulk/embulk-util-timestamp"

                scm {
                    url "https://github.com/embulk/embulk-util-timestamp"
                    connection "scm:git:git://github.com/embulk/embulk-util-timestamp.git"
                    developerConnection "scm:git:git@github.com:embulk/embulk-util-timestamp.git"
                }

                issueManagement {
                    url "https://github.com/embulk/embulk-util-timestamp/issues"
                }

                licenses {
                    license {
                        // http://central.sonatype.org/pages/requirements.html#license-information
                        name "The Apache License, Version 2.0"
                        url "https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }

                developers {
                    developer {
                        id "dmikurube"
                        name "Dai MIKURUBE"
                        email "dmikurube@treasure-data.com"
                    }
                }
            }
        }
    }
}
